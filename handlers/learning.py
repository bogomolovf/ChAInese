from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.db import db_execute
import random
import logging
import utils.keyboards

router = Router()
logger = logging.getLogger(__name__)

### ‚úÖ –ù–∞—á–∞–ª–æ –∏–∑—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
@router.message(F.text == "–ö–∞—Ä—Ç–æ—á–∫–∏")
async def learn_flashcards_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    selected_list = data.get("selected_list")

    if not selected_list:
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—É—á–µ–Ω–∏—è.", 
                            reply_markup=utils.keyboards.first_markup)
        return

    try:
        flashcards = await db_execute(
            "SELECT word, context FROM flashcards WHERE user_id = %s AND list_id = %s",
            (message.from_user.id, selected_list),
        )

        if flashcards:
            random.shuffle(flashcards)
            await state.update_data(
                flashcards=flashcards,
                current_index=0,
                task_progress={word: {
                    "translate_to_chinese": False, 
                    "translate_to_english": False, 
                    "context_completion": False,
                    "multiple_choice": False
                } for word, _ in flashcards}
            )
            await show_next_learning_task(message, state)
        else:
            await message.reply("‚ö†Ô∏è –≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—É—Å—Ç.")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")

### ‚úÖ –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
async def show_next_learning_task(message: types.Message, state: FSMContext):
    data = await state.get_data()
    flashcards = data.get("flashcards", [])
    task_progress = data.get("task_progress", {})

    if not flashcards:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    if all(all(task_done for task_done in progress.values()) for progress in task_progress.values()):
        await message.answer("üéâ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏–∑—É—á–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫!", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    word = random.choice([w for w, tasks in task_progress.items() if not all(tasks.values())])
    context = next(ctx for w, ctx in flashcards if w == word)

    available_tasks = [task for task, done in task_progress[word].items() if not done]
    if not available_tasks:
        await show_next_learning_task(message, state)
        return

    task_type = random.choice(available_tasks)

    if task_type == "translate_to_chinese":
        await message.answer(f"üìù –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —ç—Ç–æ —Å–ª–æ–≤–æ –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–∏–π: {context}")
        await state.update_data(current_task="translate_to_chinese", correct_answer=word, current_word=word, current_task_type=task_type)
        await state.set_state(StateFilter("INPUT_HANZI"))

    elif task_type == "translate_to_english":
        await message.answer(f"üìù –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —ç—Ç–æ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {word}")
        await state.update_data(current_task="translate_to_english", correct_answer=context, current_word=word, current_task_type=task_type)
        await state.set_state(StateFilter("INPUT_TRANSLATION"))

    elif task_type == "context_completion":
        await message.answer(f"üìù –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–æ–≤–∞: {word}\n–ü—Ä–∏–º–µ—Ä: {context[:len(context)//2]}...")
        await state.update_data(current_task="context_completion", correct_answer=context, current_word=word, current_task_type=task_type)
        await state.set_state(StateFilter("INPUT_TRANSLATION"))

    elif task_type == "multiple_choice":
        incorrect_options = [ctx for w, ctx in flashcards if w != word][:3]
        options = [context] + incorrect_options
        random.shuffle(options)

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=option, callback_data=f"answer_{option}")] for option in options
            ]
        )

        await message.answer(f"‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ '{word}':", reply_markup=keyboard)
        await state.update_data(current_task="multiple_choice", correct_answer=context, current_word=word, current_task_type=task_type)

### ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
@router.callback_query(lambda c: c.data.startswith("answer_"))
async def handle_button_choice(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    correct_answer = data.get("correct_answer")
    current_word = data.get("current_word")
    task_progress = data.get("task_progress")

    selected_answer = callback_query.data.replace("answer_", "")

    if selected_answer == correct_answer:
        task_progress[current_word]["multiple_choice"] = True
        await state.update_data(task_progress=task_progress)
        await callback_query.message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
        await callback_query.answer()
        await show_next_learning_task(callback_query.message, state)
    else:
        await callback_query.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
        await callback_query.answer()

### ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤
@router.message(StateFilter("INPUT_HANZI"))
async def check_hanzi_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    correct_answer = data.get("correct_answer")
    current_word = data.get("current_word")
    current_task_type = data.get("current_task_type")
    task_progress = data.get("task_progress")

    if message.text == correct_answer:
        await message.reply("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        task_progress[current_word][current_task_type] = True
    else:
        await message.reply(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    await state.update_data(task_progress=task_progress)
    await show_next_learning_task(message, state)

### ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
@router.message(StateFilter("INPUT_TRANSLATION"))
async def check_translation_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    correct_answer = data.get("correct_answer")
    current_word = data.get("current_word")
    current_task_type = data.get("current_task_type")
    task_progress = data.get("task_progress")

    if message.text.lower() == correct_answer.lower():
        await message.reply("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        task_progress[current_word][current_task_type] = True
    else:
        await message.reply(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    await state.update_data(task_progress=task_progress)
    await show_next_learning_task(message, state)
