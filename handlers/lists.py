from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from database.db import db_execute
import logging
from aiogram.filters import StateFilter
from aiogram.filters import Command
import utils.keyboards

router = Router()
logger = logging.getLogger(__name__)

### ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_lists(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–±–æ—Ä–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        rows = await db_execute("SELECT id, list_name FROM lists WHERE user_id = ?", (user_id,))
        return rows
    except Exception as e:
        logger.error(f"‚ùå Error fetching user lists: {e}")
        return []

### ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
@router.message(F.text == "Create list")
async def create_list_handler(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞:")
    await state.set_state("new_list")

@router.message(StateFilter("new_list"))
async def process_new_list(message: types.Message, state: FSMContext):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫"""
    list_name = message.text.strip()

    if not list_name:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    try:
        await db_execute("INSERT INTO lists (user_id, list_name) VALUES (?, ?)", (message.from_user.id, list_name))
        await message.answer(f"‚úÖ –°–ø–∏—Å–æ–∫ **'{list_name}'** —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

    await state.clear()

### ‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤
@router.message(StateFilter("My lists"))
async def view_lists_handler(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Å–ø–∏—Å–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫"""
    lists = await get_user_lists(message.from_user.id)

    if not lists:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ **'Create list'**.")
        return

    response = "üìÇ **–í–∞—à–∏ —Å–ø–∏—Å–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:**\n"
    for idx, (list_id, list_name) in enumerate(lists, start=1):
        response += f"{idx}. {list_name} (ID: {list_id})\n"

    await message.answer(response)

### ‚úÖ –í—ã–±–æ—Ä —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã
@router.message(lambda msg: msg.text == "Choose list", StateFilter.OPTION)
async def choose_list_handler(message: types.Message, state: FSMContext):
    """
    Prompts the user to choose a list for adding or reviewing flashcards.
    """
    lists = get_user_lists(message.from_user.id)

    if not lists:
        await message.reply("You have no lists. Create a new list first.", reply_markup=utils.keyboards.first_markup)
        return

    # Create a keyboard for list selection
    keyboard = [[KeyboardButton(text=list_name)] for _, list_name in lists]
    keyboard.append([KeyboardButton(text="Cancel")])  # Add "Cancel" button in a new row

    reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

    await message.reply("Choose a list:", reply_markup=reply_markup)
    await state.set_state("choose_list")

@router.message(StateFilter("choose_list"))
async def process_choose_list(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    list_name = message.text.strip()

    if list_name == "Cancel":
        await message.answer("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True))
        await state.clear()
        return

    lists = await get_user_lists(message.from_user.id)
    selected_list = next((list_id for list_id, name in lists if name == list_name), None)

    if selected_list is None:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    await state.update_data(selected_list=selected_list)
    await message.answer(f"‚úÖ –°–ø–∏—Å–æ–∫ **'{list_name}'** –≤—ã–±—Ä–∞–Ω!", reply_markup=ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True))
    await state.clear()

### ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
@router.message(F.text == "Delete list")
async def delete_list_handler(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    lists = await get_user_lists(message.from_user.id)

    if not lists:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=list_name)] for _, list_name in lists] + [[KeyboardButton(text="Cancel")]],
        resize_keyboard=True
    )

    await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state("delete_list")

@router.message(StateFilter("delete_list"))
async def process_delete_list(message: types.Message, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫"""
    list_name = message.text.strip()

    if list_name == "Cancel":
        await message.answer("üö´ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True))
        await state.clear()
        return

    lists = await get_user_lists(message.from_user.id)
    selected_list = next((list_id for list_id, name in lists if name == list_name), None)

    if selected_list is None:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    try:
        await db_execute("DELETE FROM flashcards WHERE list_id = ?", (selected_list,))
        await db_execute("DELETE FROM lists WHERE id = ?", (selected_list,))
        await message.answer(f"üóëÔ∏è –°–ø–∏—Å–æ–∫ **'{list_name}'** –∏ –µ–≥–æ –∫–∞—Ä—Ç–æ—á–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

    await state.clear()

    